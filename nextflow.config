/*
 * -------------------------------------------------
 *  Aladdin miqScore16S Nextflow config file
 * -------------------------------------------------
 */

// Global default params, used in configs
params {
    // Pipeline Options
    // Workflow input
    design = false

    // Input Options
    forward_primer_length = 17
    reverse_primer_length = 24
    amplicon_length = 510

    // Max resources, expected to be overwritten if run on your own system
    max_memory = 60.GB
    max_cpus = 8
    max_time = 2.h
    
    // Downsample
    downsample_num = 100000
    
    // Other Defaults
    outdir = './results'
    name = false
    help = false
    tracedir = "${params.outdir}/pipeline_info"
    awsqueue = false
    awsregion = 'us-east-1'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Profiles config
profiles {
    awsbatch { includeConfig 'conf/awsbatch.config' }
    docker { docker.enabled = true }
}

// Docker container
process.container = 'python:3.9'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'Zymo-Research/aladdin-miqScore16S'
  author = 'Zhenfeng Liu'
  homePage = 'https://github.com/Zymo-Research/aladdin-miqScore16S'
  description = 'Nextflow pipeline to run MIQ score calculator.'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.07.1'
  version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
